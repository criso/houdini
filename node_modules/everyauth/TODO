Marketing
- Write an IRC bot notifier for me (see https://github.com/fractastical/Saasy)
- Write a dashboard comparing github +/ watchers
- Add in tweet monitoring


Enable steps to be re-used across different stepSequences and modules
- DRY up automatic myHostname detection.

Ideas for cross-sequence steps:

```javascript
// Calling step on the module object defines the step without associating it
// with a step sequence
everyauth.oauth.step('name')
  .accepts('...')
  .promises('...');

// Calling step after calling stepseq, get, or post configures a step by
// potentially defining it and definitely associating it with the step sequence.
//
// The trouble with this approach is that currently the method of declaring initial
// step ordering results from the order of `step` chaining after declaration of the
// step sequence.
everyauth.oauth.get('abc')
  .step('name')
    .accepts('hello'); // Modify the step signature
```

```javacript
// As an alternative to the above approach, signature definition and re-definition
// of a step could be done via defstep (or stepsig)
everyauth.everymodule.defstep('name')
  .accepts('...')
  .promises('...')
```

Mixins - depends on what you are mixing into -- e.g., modules, sequences

```javascript
everyauth.somemodule.mixin( require('everyauth/lib/mixins/session') );
everyauth.mixin('abc');
```

```javascript
// Array API is an API that everyone understands. Leverage it to do array-like manipulations
// of steps in a step sequence.
everyauth.sequence('abc', function (seq) {
  seq.steps.push(step);
  seq.steps.splice(1, 1);
  seq.steps.shift();
  seq.steps.pop();
  var stepToModify = seq.steps[2];
  stepToModify
    .accepts('req res')
    .promises('somethingNew');
  seq.steps.withName('nameOfStep')
    .accepts('req res')
    .promises('somethingNew');
  // What about inserting after a specific step name?
});
```

Add mix-in steps
Additional step manipulation
- Remove a step
- Update a step signature
- Move a step to another place in the stepSequence
- Insert a step into a stepSequence

Document how to use APIs once logged in? Possible API might be:
    req.twitter('/api/path', function (err, res) {
    });
    req.twitter.get('/api/path', callback);
    req.twitter.post('/api/path', callback);

A more robust way to write plugins for everyauth.

How to write?
- Roles plugin
- Beta invitation plugin

Dynamic redirection.
- Intercept the referer?

Write tests.
- Facebook Test Users
  - http://developers.facebook.com/docs/test_users/
  - http://developers.facebook.com/docs/authentication/#applogin

What would be ideal for the password module:
- Enable simultaneous use of login, email, or phone as the login field.
- Auto-populate email and name via Twitter or Facebook
- Add additional fields to schema via mongoose-auth, and auto-configure everything else in everyauth based on that info.
- Add in extra err checking for User.create catching unique login violation
- Use ajax response instead of redirect

More idiomatic registration validation -- e.g.,

    everyauth.password
      .validate( 'fieldName', validatorFn, 'error message' );

User getters in views (e.g., everyauth.password.postLoginPath())

Add return this.async( function (callback, breakTo) {
});
as an alternative to working with Promises

Try incorporating `if` semantics
  if('conditionAlias')
  
  conditionAlias( function () {
    conditionAlias.true(arg1, arg2);
    conditionAlias.false(arg1, arg2);
  });

Handle facebook's potential 400 response

Replace old incomplete step deinition check with newer introspection code
 (and make sure it's lazy)

Add in ability to unauth a paritcular 3rd party provider.
    req.logout('facebook');

What about failed password login

What to do when auth is revoked?
1. Detection
2. Response

Add in ability to make configurables "required" or "optional", and notify the developer if they forgot to configure something required


ea.fb.man should include
  - Description
  - Instructions

ea.fb.instructions; // Prints out what needs to be configured

Instructions should include
  - Template of minimum things that must be added
  - Other configuration options
  - Other steps that you can over-ride per route


Improve introspection tools
ea.fb.get.authAlias.steps.optional

Add in ability for step to be optional
Make some steps optional

With `step` method, use opts (e.g., for ordering information {before: 'otherStepName'})

Add default views and paths for password auth

with nice helpers like getLoginPath and postLoginPath
    everyauth.password
      .viewhelper('getLoginPath')
      .viewhelper('postLoginPath')

Make password's authenticate configurable (so you can choose your password strategy)

Make express decoration part of the middleware (Is this possible?)
- After looking at connect source, I don't think this is possible

Next plugins to write:
- Beta invitation
- rememberMeSessions
- passwordRecovery
- registrationConfirmation
- failedLoginLockout
- Track login activity
- Timeouts to logout a user who has not been active
- Confirmable - Emails with confirmation instructions + verifies whether an account is already confirmed during sign in
- Recoverable - Resets the user password and sends reset instructions
- Destroying an account
- Trackable - tracks sign in count, timestamps, and IP address
- Lockable - locks an account after a specified number of failed sign-in attempts. Can unlock via email after a specified time period
- Encryptable - other auth mechanisms besides bcrypt
- Role based authorization
  - https://github.com/be9/acl9
  - https://github.com/ryanb/cancan/wiki/defining-abilities 
  - https://github.com/stffn/declarative_authorization
  - http://en.wikipedia.org/wiki/Role-based_access_control
- Email support for the registration process, password recovery, etc

Next Providers to Write:
- HTTP Basic Authentication
- Single access token authentication
- Tumblr
  - Consumer Key: TAofjqRz9iKiAjtPMnXzHELIeQAw8cqKCZVXaEFSAxBrrvV99f
  - Secret: s8ldFtirtsnWGSiBjwpUwMct8Yh4sliS9Uiocqsv3bw0ovMtlR
- Instapaper
- Yammer and PayPal (https://www.x.com/community/ppx/authentication ; https://www.x.com/community/ppx/permissions )
- Meetup
- 37signals ID
- Bit.ly
- Vimeo
- YouTube
- SoundCloud
- OpenID (Google Apps)
- LDAP
- Flickr
- Twitter OAuth 2
  - https://gist.github.com/870685/62a029ffdbaea7a6e1f5d835d36b8e95a391921f
  - http://groups.google.com/group/twitter-development-talk/browse_thread/thread/abed22b1e31cef56/95ab8fb0930a8679?lnk=raot&pli=1

Document in README
- How to specify timeout at module and step level
- How to specify error handling per auth module via convertErr
- Document hidden last step arg `data` (access to current sequence's values inside a step block -- e.g., validateRegistration needs to use req and res if it does breakTo 'registrationError')
- Document convertErr (when making your own modules)
- step breakTo's
- this._super() and this._super(...) from within step block configurations
- Does google module need to be used with localhost? Or does local.host suffice?
- Add instructions for using everyauth with subdomains
